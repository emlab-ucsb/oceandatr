---
title: "Retrieving boundaries with get_boundary()"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Retrieving boundaries with get_boundary()}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include = FALSE}
#for cropping whitespace from around figures, use crop = TRUE
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)

knitr::opts_chunk$set(
	echo = TRUE,
	message = FALSE,
	warning = FALSE,
	collapse = TRUE,
	comment = "#>",
	fig.align = "center",
  fig.width = 7, 
  fig.height = 5,
  crop = TRUE
)

devtools::load_all()
```

```{r load_oceandatr, eval=FALSE}
#load oceandatr package
library(oceandatr)
```


`get_boundary()` can be used to retrieve a variety of marine and terrestrial boundary types. Details on the options are in the help file `?get_boundary()`, but figuring out exactly how to get a particular type of boundary can still be confusing. Here we provide some examples. 

# Marine boundaries

`get_boundary()` uses the `mregions2::mrp_get()` function from the [`mregions2`](https://lifewatch.github.io/mregions2/) package - the R package for the Marine Regions database. This database is quite extensive and has several options for querying areas. `get_boundary()` is not intended to provide all the functionality of `mregions2`, just a slightly simpler interface for getting commonly used boundaries such as exclusive economic zones (EEZs), global ocean boundaries, and high seas areas.

When using `get_boundary()` with `type = "eez"`, `type = "12nm"` or `type = "24nm"`, the `country_type` can be either `country_type = "country"` or `country_type = "sovereign"`. Using `"country"` returns only the EEZ, 12nm or 24nm boundary of the mainland country, while using `"sovereign"` returns boundaries for all the states and territories that a country has sovereignty over as well. The examples below show how this works. 

Note that if `type = "ocean"` or `type = "high_seas"`, `country_type` is ignored.

Here is a simple query to get Australia's EEZ:

```{r australia_eez, fig.cap = ""}
aus_eez <- get_boundary(name = "Australia", type = "eez")

plot(aus_eez["geometry"], axes = TRUE)
```

But lets look at what happens if we change the `country_type` from the default `"country"` to `"sovereign"`:

```{r australia_eez_sovereign, fig.cap = ""}
aus_eez_sov <- get_boundary(name = "Australia", type = "eez", country_type = "sovereign")

plot(aus_eez_sov["geometry"], axes = TRUE)
```

We now get not just the main country of Australia, but all the islands it has sovereignty over. For more detail, see the [Marine Regions attribute table](https://marineregions.org/eezattribute.php); using `country_type = "country"` queries using the 'territory1' attribute, and using `country_type = "sovereign"` uses the 'territory1' attribute.

Here is another example using France. Only the EEZ bordering mainland France is retrieved if `country_type = "country"`, but setting `country_type = "sovereign"` we also get all the islands France has sovereignty over.

```{r france_eez, fig.cap="EEZ of mainland France (blue) and all overseas territories (solid outlines). World coastlines are shown as dashed line for reference."}
fr_eez <- get_boundary(name = "France", type = "eez", country_type = "country")

fr_eez_sov <- get_boundary(name = "France", type = "eez", country_type = "sovereign")


plot(sf::st_geometry(fr_eez_sov), lwd = 1, axes = TRUE)
plot(fr_eez["geometry"], col = "royalblue", add = T)
plot(rnaturalearth::ne_coastline(scale = 110)["geometry"], lty = 3, add = TRUE)
```

An example, where you might want to use `sovereign` is when you are trying to get all the islands that make up Kiribati. Using `country_type = "country"` does not return anything because each island group is listed as a country. Note that if the `name` provided is not found, a list of all possible `country_type` options to chose from is provided (only part of the output is shown for brevity):

```{r kribati_example_wrong, eval=FALSE}
get_boundary(name = "Kiribati", type = "eez", country_type = "country")
```
```{r eez_countries_list, echo=FALSE, fig.cap = ""}
knitr::include_graphics("figs/eez_countries_list.png")
```

Try again, setting `country_type = "sovereign"`:

```{r kribati_example_right, fig.cap = "Kiribati's EEZ. World coastlines are shown as dashed line for reference."}
kir_eez <- get_boundary(name = "Kiribati", type = "eez", country_type = "sovereign")

plot(sf::st_geometry(kir_eez), col = "royalblue")
plot(rnaturalearth::ne_coastline(scale = 110)["geometry"], lty = 3, add = TRUE)
```


The `mregions2` package can be used to query many different marine boundaries, not all of which are included as options for `get_boundary()`:

```{r possible_query_types, eval=FALSE}
mregions2::mrp_list[,c("title", "layer")]
```

```{r possible_query_types_output, echo=FALSE}
knitr::kable(mregions2::mrp_list[,c("title", "layer")])
```

# Land boundaries

`get_boundary()` uses the `rnaturalearth::ne_countries()` function from the [`rnaturalearth``](https://docs.ropensci.org/rnaturalearth/index.html) package to retrieve land boundaries. `get_boundary()` is only intended to provide a slightly simpler interface for getting some commonly used land boundaries.

As with maritime boundaries, the `country_type` can be specified as either `country_type = "country"` or `country_type = "sovereign"` depending on whether only the main country is required or the country and all territories/ states it has sovereignty over. The following examples show how these options work in practice. 

The `rnaturalearth` package [vignette](https://docs.ropensci.org/rnaturalearth/articles/rnaturalearth.html) contains more details about what constitutes a country and more options for querying.

If we query France setting `country_type = "country"` we get:

```{r france_country, fig.cap = ""}
france <- get_boundary(name = "France", type = "country", country_type = "country")

plot(sf::st_geometry(france), col = "blue")
plot(rnaturalearth::ne_coastline(scale = 110)["geometry"], lty = 3, add = TRUE)
```

This is slightly unexpected perhaps, but the islands of Guadeloupe and Martinique in the Caribbean, Mayotte and RÃ©union in the Western Indian Ocean, and French Guiana in South America, all have the same status as mainland France.

If we use `country_type = "sovereign"`, we also get France's overseas territories in the Pacific, Atlantic and Antarctic:


```{r france_country_sovereign, fig.cap = ""}
france_sov <- get_boundary(name = "France", type = "country", country_type = "sovereign")

plot(sf::st_geometry(france_sov), col = "blue")
plot(rnaturalearth::ne_coastline(scale = 110)["geometry"], lty = 3, add = TRUE)
```