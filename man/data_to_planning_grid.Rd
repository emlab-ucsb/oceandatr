% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_to_planning_grid.R
\name{data_to_planning_grid}
\alias{data_to_planning_grid}
\title{Get gridded or cropped data from input data}
\usage{
data_to_planning_grid(
  area_polygon = NULL,
  planning_grid = NULL,
  dat = NULL,
  meth = NULL,
  name = NULL,
  sf_col_layer_names = NULL,
  antimeridian = NULL
)
}
\arguments{
\item{area_polygon}{`sf` polygon}

\item{planning_grid}{`sf` or `terra::rast()` planning grid}

\item{dat}{`sf` or `terra::rast()` data to be gridded/ cropped}

\item{meth}{`character` method to use for for gridding/ resampling/ reprojecting raster data. If NULL (default), function checks if data values are binary (all 0, 1, NA, or NaN) in which case method is set to "mode" for sf output or "near" for raster output. If data is non-binary, method is set to "average" for sf output or "mean" for raster output. Note that different methods are used for sf and raster as `exactextractr::exact_extract()` is used for gridding to sf planning grid, whereas `terra::project()`/`terra::resample()` is used for transforming/ gridding raster data.}

\item{name}{`character` to name the data output}

\item{sf_col_layer_names}{`character` vector; name(s) of columns that contain the data to be gridded/ cropped in `sf` input data; defaults to first column}

\item{antimeridian}{`logical` can be set to true if the data to be extracted crosses the antimeridian and is in lon-lat (EPSG:4326) format. If set to `NULL` (default) the function will try to check if data spans the antimeridian and set this appropriately.}
}
\value{
`sf` or `terra::rast()` object; cropped and intersected data in same format as `dat` if  an `area_polygon` is provided, otherwise `sf` or `terra::rast()` planning gridded data depending on the format of the planning grid provided
}
\description{
Get gridded or cropped data from input data
}
\examples{
# Get knolls data
knolls <- system.file("extdata", "knolls.rds", package = "oceandatr", mustWork = TRUE) \%>\% readRDS() 
# Get EEZ data
bermuda_eez <- get_area(area_name = "Bermuda", mregions_column = "territory1")
# Create a planning grid
planning_grid <- get_planning_grid(area_polygon = bermuda_eez, projection_crs = '+proj=laea +lon_0=-64.8108333 +lat_0=32.3571917 +datum=WGS84 +units=m +no_defs', resolution = 5000)
# Get knolls data into the planning grid
knolls_gridded <- data_to_planning_grid(planning_grid = planning_grid, dat = knolls)
}
