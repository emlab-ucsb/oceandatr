% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_features.R
\name{get_features}
\alias{get_features}
\title{Get a set of feature data for a spatial grid}
\usage{
get_features(
  spatial_grid = NULL,
  raw = FALSE,
  features = c("bathymetry", "seamounts", "knolls", "geomorphology", "corals",
    "enviro_regions"),
  bathy_resolution = 1,
  seamount_buffer = 30000,
  antipatharia_threshold = 22,
  octocoral_threshold = 2,
  enviro_clusters = NULL,
  max_enviro_clusters = 6,
  antimeridian = NULL
)
}
\arguments{
\item{spatial_grid}{\code{sf} or \code{terra::rast()} grid, e.g. created using \code{get_grid()}. Alternatively, if raw data is required, an \code{sf} polygon can be provided, e.g. created using \code{get_boundary()}, and set \code{raw = TRUE}.}

\item{raw}{\code{logical} if TRUE, \code{spatial_grid} should be an \code{sf} polygon, and the raw feature data in that polygon(s) will be returned. Note that this will be a list object, since raster and \code{sf} data may be returned.}

\item{features}{a vector of feature names, can include: "bathymetry", "seamounts", "knolls", "geomorphology", "corals", "enviro_regions"}

\item{bathy_resolution}{\code{numeric}; the resolution (in minutes) of data to pull from the ETOPO 2022 Global Relief model. Values less than 1 can only be 0.5 (30 arc seconds) and 0.25 (15 arc seconds)}

\item{seamount_buffer}{\code{numeric}; the distance from the seamount peak to include in the output. Distance should be in the same units as the area_polygon or spatial_grid provided, use e.g. \code{sf::st_crs(spatial_grid, parameters = TRUE)$units_gdal} to check what units your planning grid or area polygon is in (works for raster as well as sf objects)}

\item{antipatharia_threshold}{\code{numeric} between 0 and 100; the threshold value for habitat suitability for antipatharia corals to be considered present (default is 22, as defined in Yesson et al., 2017)}

\item{octocoral_threshold}{\code{numeric} between 0 and 7; the threshold value for how many species (of 7) should be predicted present in an area for octocorals to be considered present (default is 2)}

\item{enviro_clusters}{\code{numeric}; the number of environmental regions to cluster the data into - to be used when a clustering algorithm is not necessary (default is NULL)}

\item{max_enviro_clusters}{\code{numeric}; the maximum number of environmental regions to try when using the clustering algorithm (default is 8)}

\item{antimeridian}{Does \code{spatial_grid} span the antimeridian? If so, this should be set to \code{TRUE}, otherwise set to \code{FALSE}. If set to \code{NULL} (default) the function will try to check if data spans the antimeridian and set this appropriately.}
}
\value{
If \code{raw = TRUE}, a list of feature data is returned (mixed raster and \code{sf} objects). If a \code{spatial_grid} is supplied, a multi-layer raster or \code{sf} object of gridded data is returned, depending on the \code{spatial_grid} format.
}
\description{
This is a wrapper of \code{get_bathymetry()}, \code{get_seamounts_buffered()}, \code{get_knolls()}, \code{get_geomorphology()}, \code{get_coral_habitat()}, and \code{get_enviro_regions()}. See the individual functions for details.
}
\examples{
# Grab EEZ data first 
bermuda_eez <- get_boundary(name = "Bermuda")
# Get raw data for Bermuda's EEZ
raw_data <- get_features(spatial_grid = bermuda_eez, raw = TRUE)
# Get feature data in a spatial grid
bermuda_grid <- get_grid(boundary = bermuda_eez, crs = '+proj=laea +lon_0=-64.8108333 +lat_0=32.3571917 +datum=WGS84 +units=m +no_defs', resolution = 20000)
features_gridded <- get_features(spatial_grid = bermuda_grid)
terra::plot(features_gridded)
}
